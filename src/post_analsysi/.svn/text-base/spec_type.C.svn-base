{
//=========Macro generated from canvas: cFinal/Final
//=========  (Fri Oct  9 14:53:21 2009) by ROOT version5.18/00
   TCanvas *cFinal = new TCanvas("cFinal", "Final",15,35,552,560);
   gStyle->SetOptStat(0);
   cFinal->SetHighLightColor(2);
   cFinal->Range(0,0,1,1);
   cFinal->SetFillColor(0);
   cFinal->SetBorderMode(0);
   cFinal->SetBorderSize(2);
   cFinal->SetLeftMargin(0.14);
   cFinal->SetFrameBorderMode(0);
  
// ------------>Primitives in pad: cFinal_1
   TPad *cFinal_1 = new TPad("cFinal_1", "cFinal_1",0.00729927,0.01132075,0.979927,0.9924528);
   cFinal_1->Draw();
   cFinal_1->cd();
   cFinal_1->Range(-239.4737,-0.02051707,1471.053,0.1278265);
   cFinal_1->SetFillColor(0);
   cFinal_1->SetBorderMode(0);
   cFinal_1->SetBorderSize(2);
   cFinal_1->SetLeftMargin(0.14);
   cFinal_1->SetFrameBorderMode(0);
   cFinal_1->SetFrameBorderMode(0);
   Double_t xAxis[104] = {00, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300, 2400, 2500, 2600, 2700, 2800, 2900, 3000, 3100, 3200, 3300, 3400, 3500, 3600, 3700, 3800, 3900, 4000, 4100, 4200, 4300, 4400, 4500, 4600, 4700, 4800, 4900, 5000, 5100, 5200, 5300, 5400, 5500, 5600, 5700, 5800, 5900, 6000, 6100, 6200, 6300, 6400, 6500, 6600, 6700, 6800, 6900, 7000, 7100, 7200, 7300, 7400, 7500, 7600, 7700, 7800, 7900, 8000, 8100, 8200, 8300, 8400, 8500, 8600, 8700, 8800, 8900, 10000, 11000, 12000, 13000, 14000, 15000, 16000, 17000, 18000, 19000, 20000, 21000, 22000, 23000}; 
   
   TH1 *hEFlipperOn = new TH1F("hEFlipperOn","",103, xAxis);
   hEFlipperOn->SetBinContent(1,0.005469756);
   hEFlipperOn->SetBinContent(2,0.01759826);
   hEFlipperOn->SetBinContent(3,0.0328516);
   hEFlipperOn->SetBinContent(4,0.0431178);
   hEFlipperOn->SetBinContent(5,0.05075824);
   hEFlipperOn->SetBinContent(6,0.05654142);
   hEFlipperOn->SetBinContent(7,0.06476178);
   hEFlipperOn->SetBinContent(8,0.06932454);
   hEFlipperOn->SetBinContent(9,0.07515457);
   hEFlipperOn->SetBinContent(10,0.08015075);
   hEFlipperOn->SetBinContent(11,0.08265375);
   hEFlipperOn->SetBinContent(12,0.08745904);
   hEFlipperOn->SetBinContent(13,0.09079576);
   hEFlipperOn->SetBinContent(14,0.09412038);
   hEFlipperOn->SetBinContent(15,0.09535374);
   hEFlipperOn->SetBinContent(16,0.09922455);
   hEFlipperOn->SetBinContent(17,0.1009901);
   hEFlipperOn->SetBinContent(18,0.1025105);
   hEFlipperOn->SetBinContent(19,0.1049317);
   hEFlipperOn->SetBinContent(20,0.1046006);
   hEFlipperOn->SetBinContent(21,0.1049469);
   hEFlipperOn->SetBinContent(22,0.1066863);
   hEFlipperOn->SetBinContent(23,0.106301);
   hEFlipperOn->SetBinContent(24,0.1063669);
   hEFlipperOn->SetBinContent(25,0.1059665);
   hEFlipperOn->SetBinContent(26,0.104603);
   hEFlipperOn->SetBinContent(27,0.1046136);
   hEFlipperOn->SetBinContent(28,0.103931);
   hEFlipperOn->SetBinContent(29,0.102873);
   hEFlipperOn->SetBinContent(30,0.1026405);
   hEFlipperOn->SetBinContent(31,0.1002909);
   hEFlipperOn->SetBinContent(32,0.09788777);
   hEFlipperOn->SetBinContent(33,0.09566344);
   hEFlipperOn->SetBinContent(34,0.09372814);
   hEFlipperOn->SetBinContent(35,0.09229965);
   hEFlipperOn->SetBinContent(36,0.08976136);
   hEFlipperOn->SetBinContent(37,0.08600848);
   hEFlipperOn->SetBinContent(38,0.08429421);
   hEFlipperOn->SetBinContent(39,0.08093614);
   hEFlipperOn->SetBinContent(40,0.07901219);
   hEFlipperOn->SetBinContent(41,0.07516602);
   hEFlipperOn->SetBinContent(42,0.07189728);
   hEFlipperOn->SetBinContent(43,0.06980705);
   hEFlipperOn->SetBinContent(44,0.06603328);
   hEFlipperOn->SetBinContent(45,0.06224501);
   hEFlipperOn->SetBinContent(46,0.05845843);
   hEFlipperOn->SetBinContent(47,0.05469981);
   hEFlipperOn->SetBinContent(48,0.05315418);
   hEFlipperOn->SetBinContent(49,0.04877609);
   hEFlipperOn->SetBinContent(50,0.04490774);
   hEFlipperOn->SetBinContent(51,0.04241805);
   hEFlipperOn->SetBinContent(52,0.0394173);
   hEFlipperOn->SetBinContent(53,0.03529991);
   hEFlipperOn->SetBinContent(54,0.03288646);
   hEFlipperOn->SetBinContent(55,0.02935136);
   hEFlipperOn->SetBinContent(56,0.02612217);
   hEFlipperOn->SetBinContent(57,0.02349423);
   hEFlipperOn->SetBinContent(58,0.02098943);
   hEFlipperOn->SetBinContent(59,0.01830387);
   hEFlipperOn->SetBinContent(60,0.0157596);
   hEFlipperOn->SetBinContent(61,0.01356864);
   hEFlipperOn->SetBinContent(62,0.01112531);
   hEFlipperOn->SetBinContent(63,0.009796678);
   hEFlipperOn->SetBinContent(64,0.008078067);
   hEFlipperOn->SetBinContent(65,0.005998627);
   hEFlipperOn->SetBinContent(66,0.005550515);
   hEFlipperOn->SetBinContent(67,0.004146726);
   hEFlipperOn->SetBinContent(68,0.002785524);
   hEFlipperOn->SetBinContent(69,0.002780912);
   hEFlipperOn->SetBinContent(70,0.001955762);
   hEFlipperOn->SetBinContent(71,0.001196697);
   hEFlipperOn->SetBinContent(72,0.0009275449);
   hEFlipperOn->SetBinContent(73,0.0004103338);
   hEFlipperOn->SetBinContent(74,0.0003653788);
   hEFlipperOn->SetBinContent(75,0.0002475647);
   hEFlipperOn->SetBinContent(76,0.0001448874);
   hEFlipperOn->SetBinContent(77,-0.0001069676);
   hEFlipperOn->SetBinContent(78,0.0002279751);
   hEFlipperOn->SetBinContent(79,-0.0002556696);
   hEFlipperOn->SetBinContent(80,0.0002081454);
   hEFlipperOn->SetBinContent(81,-0.0001802417);
   hEFlipperOn->SetBinContent(82,0.0001094775);
   hEFlipperOn->SetBinContent(83,0.0001021641);
   hEFlipperOn->SetBinContent(84,-6.720283e-05);
   hEFlipperOn->SetBinContent(85,-2.069301e-05);
   hEFlipperOn->SetBinContent(86,-0.0001778551);
   hEFlipperOn->SetBinContent(87,-0.0002069073);
   hEFlipperOn->SetBinContent(88,0.0002050919);
   hEFlipperOn->SetBinContent(89,5.5018e-06);
   hEFlipperOn->SetBinContent(90,0.0001297852);
   hEFlipperOn->SetBinContent(91,0.0001645202);
   hEFlipperOn->SetBinContent(92,1.679766e-05);
   hEFlipperOn->SetBinContent(93,0.0004969584);
   hEFlipperOn->SetBinContent(94,0.0005285302);
   hEFlipperOn->SetBinContent(95,-0.0001433009);
   hEFlipperOn->SetBinContent(96,0.0002965277);
   hEFlipperOn->SetBinContent(97,-0.0001372856);
   hEFlipperOn->SetBinContent(98,1.944697e-05);
   hEFlipperOn->SetBinContent(99,-1.461355e-05);
   hEFlipperOn->SetBinContent(100,0.0001382396);
   hEFlipperOn->SetBinContent(101,0.0001261757);
   hEFlipperOn->SetBinContent(102,-2.71269e-05);
   hEFlipperOn->SetBinContent(103,-3.756019e-05);
   hEFlipperOn->SetBinError(1,0.0001607538);
   hEFlipperOn->SetBinError(2,0.0002783453);
   hEFlipperOn->SetBinError(3,0.0003737296);
   hEFlipperOn->SetBinError(4,0.0004257615);
   hEFlipperOn->SetBinError(5,0.0004595565);
   hEFlipperOn->SetBinError(6,0.0004837438);
   hEFlipperOn->SetBinError(7,0.0005153653);
   hEFlipperOn->SetBinError(8,0.0005335152);
   hEFlipperOn->SetBinError(9,0.0005535113);
   hEFlipperOn->SetBinError(10,0.0005701567);
   hEFlipperOn->SetBinError(11,0.0005790141);
   hEFlipperOn->SetBinError(12,0.0005950265);
   hEFlipperOn->SetBinError(13,0.00060532);
   hEFlipperOn->SetBinError(14,0.000615608);
   hEFlipperOn->SetBinError(15,0.0006205245);
   hEFlipperOn->SetBinError(16,0.0006312579);
   hEFlipperOn->SetBinError(17,0.0006369955);
   hEFlipperOn->SetBinError(18,0.0006418732);
   hEFlipperOn->SetBinError(19,0.0006494547);
   hEFlipperOn->SetBinError(20,0.0006478049);
   hEFlipperOn->SetBinError(21,0.0006488917);
   hEFlipperOn->SetBinError(22,0.0006547094);
   hEFlipperOn->SetBinError(23,0.0006529324);
   hEFlipperOn->SetBinError(24,0.000653448);
   hEFlipperOn->SetBinError(25,0.0006521795);
   hEFlipperOn->SetBinError(26,0.0006476902);
   hEFlipperOn->SetBinError(27,0.0006473806);
   hEFlipperOn->SetBinError(28,0.0006453291);
   hEFlipperOn->SetBinError(29,0.0006420351);
   hEFlipperOn->SetBinError(30,0.0006408947);
   hEFlipperOn->SetBinError(31,0.0006336109);
   hEFlipperOn->SetBinError(32,0.0006254144);
   hEFlipperOn->SetBinError(33,0.0006190161);
   hEFlipperOn->SetBinError(34,0.0006125336);
   hEFlipperOn->SetBinError(35,0.0006079814);
   hEFlipperOn->SetBinError(36,0.0005990917);
   hEFlipperOn->SetBinError(37,0.0005871198);
   hEFlipperOn->SetBinError(38,0.000580902);
   hEFlipperOn->SetBinError(39,0.0005694267);
   hEFlipperOn->SetBinError(40,0.0005625537);
   hEFlipperOn->SetBinError(41,0.0005488728);
   hEFlipperOn->SetBinError(42,0.0005368083);
   hEFlipperOn->SetBinError(43,0.0005285279);
   hEFlipperOn->SetBinError(44,0.0005154824);
   hEFlipperOn->SetBinError(45,0.0005001457);
   hEFlipperOn->SetBinError(46,0.0004850489);
   hEFlipperOn->SetBinError(47,0.0004692819);
   hEFlipperOn->SetBinError(48,0.0004618629);
   hEFlipperOn->SetBinError(49,0.0004432145);
   hEFlipperOn->SetBinError(50,0.0004256864);
   hEFlipperOn->SetBinError(51,0.0004137751);
   hEFlipperOn->SetBinError(52,0.0003986137);
   hEFlipperOn->SetBinError(53,0.0003775937);
   hEFlipperOn->SetBinError(54,0.0003650927);
   hEFlipperOn->SetBinError(55,0.0003453884);
   hEFlipperOn->SetBinError(56,0.0003261171);
   hEFlipperOn->SetBinError(57,0.0003093165);
   hEFlipperOn->SetBinError(58,0.0002929291);
   hEFlipperOn->SetBinError(59,0.0002746646);
   hEFlipperOn->SetBinError(60,0.0002550808);
   hEFlipperOn->SetBinError(61,0.0002369154);
   hEFlipperOn->SetBinError(62,0.0002159417);
   hEFlipperOn->SetBinError(63,0.0002036468);
   hEFlipperOn->SetBinError(64,0.0001854241);
   hEFlipperOn->SetBinError(65,0.0001640159);
   hEFlipperOn->SetBinError(66,0.0001556676);
   hEFlipperOn->SetBinError(67,0.0001371361);
   hEFlipperOn->SetBinError(68,0.0001204123);
   hEFlipperOn->SetBinError(69,0.000116867);
   hEFlipperOn->SetBinError(70,0.0001027876);
   hEFlipperOn->SetBinError(71,8.795225e-05);
   hEFlipperOn->SetBinError(72,8.163883e-05);
   hEFlipperOn->SetBinError(73,6.550503e-05);
   hEFlipperOn->SetBinError(74,6.486158e-05);
   hEFlipperOn->SetBinError(75,5.795306e-05);
   hEFlipperOn->SetBinError(76,5.879199e-05);
   hEFlipperOn->SetBinError(77,5.049313e-05);
   hEFlipperOn->SetBinError(78,5.699982e-05);
   hEFlipperOn->SetBinError(79,4.4959e-05);
   hEFlipperOn->SetBinError(80,5.252284e-05);
   hEFlipperOn->SetBinError(81,4.477577e-05);
   hEFlipperOn->SetBinError(82,5.359608e-05);
   hEFlipperOn->SetBinError(83,5.302637e-05);
   hEFlipperOn->SetBinError(84,4.449491e-05);
   hEFlipperOn->SetBinError(85,5.106773e-05);
   hEFlipperOn->SetBinError(86,3.842288e-05);
   hEFlipperOn->SetBinError(87,4.39368e-05);
   hEFlipperOn->SetBinError(88,5.476952e-05);
   hEFlipperOn->SetBinError(89,4.958749e-05);
   hEFlipperOn->SetBinError(90,0.0001515123);
   hEFlipperOn->SetBinError(91,0.0001200921);
   hEFlipperOn->SetBinError(92,9.778422e-05);
   hEFlipperOn->SetBinError(93,9.404746e-05);
   hEFlipperOn->SetBinError(94,8.72329e-05);
   hEFlipperOn->SetBinError(95,6.512071e-05);
   hEFlipperOn->SetBinError(96,7.032727e-05);
   hEFlipperOn->SetBinError(97,4.896222e-05);
   hEFlipperOn->SetBinError(98,5.16976e-05);
   hEFlipperOn->SetBinError(99,4.471131e-05);
   hEFlipperOn->SetBinError(100,4.685843e-05);
   hEFlipperOn->SetBinError(101,4.166862e-05);
   hEFlipperOn->SetBinError(102,3.714333e-05);
   hEFlipperOn->SetBinError(103,3.614517e-05);
   hEFlipperOn->SetEntries(9167);
   hEFlipperOn->SetStats(0);
   hEFlipperOn->GetXaxis()->SetTitle(" ADC Channel ");
   hEFlipperOn->GetXaxis()->SetRange(1,93);
   hEFlipperOn->GetYaxis()->SetTitle(" Rate (Hz)");
   hEFlipperOn->GetYaxis()->CenterTitle(true);
   hEFlipperOn->GetYaxis()->SetTitleOffset(1.6);
   hEFlipperOn->Draw("h");
   cFinal_1->Modified();
   cFinal->cd();
  
// ------------>Primitives in pad: cFinal_2
   cFinal_2 = new TPad("cFinal_2", "cFinal_2",0.4726277,0.4358491,0.879562,0.8735849);
   cFinal_2->Draw();
   cFinal_2->cd();
   cFinal_2->Range(529.6471,-0.0004659486,2523.529,0.0007942377);
   cFinal_2->SetFillColor(0);
   cFinal_2->SetBorderMode(0);
   cFinal_2->SetBorderSize(2);
   cFinal_2->SetLeftMargin(0.1255605);
   cFinal_2->SetRightMargin(0.1121076);
   cFinal_2->SetFrameBorderMode(0);
   cFinal_2->SetFrameBorderMode(0);
   Double_t xAxis[104] = {00, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300, 2400, 2500, 2600, 2700, 2800, 2900, 3000, 3100, 3200, 3300, 3400, 3500, 3600, 3700, 3800, 3900, 4000, 4100, 4200, 4300, 4400, 4500, 4600, 4700, 4800, 4900, 5000, 5100, 5200, 5300, 5400, 5500, 5600, 5700, 5800, 5900, 6000, 6100, 6200, 6300, 6400, 6500, 6600, 6700, 6800, 6900, 7000, 7100, 7200, 7300, 7400, 7500, 7600, 7700, 7800, 7900, 8000, 8100, 8200, 8300, 8400, 8500, 8600, 8700, 8800, 8900, 10000, 11000, 12000, 13000, 14000, 15000, 16000, 17000, 18000, 19000, 20000, 21000, 22000, 23000}; 
   
   TH1 *hEFlipperClone = new TH1F("hEFlipperClone","Residual Background 0.8-2.3 MeV ",103, xAxis);
   hEFlipperClone->SetBinContent(1,0.005469756);
   hEFlipperClone->SetBinContent(2,0.01759826);
   hEFlipperClone->SetBinContent(3,0.0328516);
   hEFlipperClone->SetBinContent(4,0.0431178);
   hEFlipperClone->SetBinContent(5,0.05075824);
   hEFlipperClone->SetBinContent(6,0.05654142);
   hEFlipperClone->SetBinContent(7,0.06476178);
   hEFlipperClone->SetBinContent(8,0.06932454);
   hEFlipperClone->SetBinContent(9,0.07515457);
   hEFlipperClone->SetBinContent(10,0.08015075);
   hEFlipperClone->SetBinContent(11,0.08265375);
   hEFlipperClone->SetBinContent(12,0.08745904);
   hEFlipperClone->SetBinContent(13,0.09079576);
   hEFlipperClone->SetBinContent(14,0.09412038);
   hEFlipperClone->SetBinContent(15,0.09535374);
   hEFlipperClone->SetBinContent(16,0.09922455);
   hEFlipperClone->SetBinContent(17,0.1009901);
   hEFlipperClone->SetBinContent(18,0.1025105);
   hEFlipperClone->SetBinContent(19,0.1049317);
   hEFlipperClone->SetBinContent(20,0.1046006);
   hEFlipperClone->SetBinContent(21,0.1049469);
   hEFlipperClone->SetBinContent(22,0.1066863);
   hEFlipperClone->SetBinContent(23,0.106301);
   hEFlipperClone->SetBinContent(24,0.1063669);
   hEFlipperClone->SetBinContent(25,0.1059665);
   hEFlipperClone->SetBinContent(26,0.104603);
   hEFlipperClone->SetBinContent(27,0.1046136);
   hEFlipperClone->SetBinContent(28,0.103931);
   hEFlipperClone->SetBinContent(29,0.102873);
   hEFlipperClone->SetBinContent(30,0.1026405);
   hEFlipperClone->SetBinContent(31,0.1002909);
   hEFlipperClone->SetBinContent(32,0.09788777);
   hEFlipperClone->SetBinContent(33,0.09566344);
   hEFlipperClone->SetBinContent(34,0.09372814);
   hEFlipperClone->SetBinContent(35,0.09229965);
   hEFlipperClone->SetBinContent(36,0.08976136);
   hEFlipperClone->SetBinContent(37,0.08600848);
   hEFlipperClone->SetBinContent(38,0.08429421);
   hEFlipperClone->SetBinContent(39,0.08093614);
   hEFlipperClone->SetBinContent(40,0.07901219);
   hEFlipperClone->SetBinContent(41,0.07516602);
   hEFlipperClone->SetBinContent(42,0.07189728);
   hEFlipperClone->SetBinContent(43,0.06980705);
   hEFlipperClone->SetBinContent(44,0.06603328);
   hEFlipperClone->SetBinContent(45,0.06224501);
   hEFlipperClone->SetBinContent(46,0.05845843);
   hEFlipperClone->SetBinContent(47,0.05469981);
   hEFlipperClone->SetBinContent(48,0.05315418);
   hEFlipperClone->SetBinContent(49,0.04877609);
   hEFlipperClone->SetBinContent(50,0.04490774);
   hEFlipperClone->SetBinContent(51,0.04241805);
   hEFlipperClone->SetBinContent(52,0.0394173);
   hEFlipperClone->SetBinContent(53,0.03529991);
   hEFlipperClone->SetBinContent(54,0.03288646);
   hEFlipperClone->SetBinContent(55,0.02935136);
   hEFlipperClone->SetBinContent(56,0.02612217);
   hEFlipperClone->SetBinContent(57,0.02349423);
   hEFlipperClone->SetBinContent(58,0.02098943);
   hEFlipperClone->SetBinContent(59,0.01830387);
   hEFlipperClone->SetBinContent(60,0.0157596);
   hEFlipperClone->SetBinContent(61,0.01356864);
   hEFlipperClone->SetBinContent(62,0.01112531);
   hEFlipperClone->SetBinContent(63,0.009796678);
   hEFlipperClone->SetBinContent(64,0.008078067);
   hEFlipperClone->SetBinContent(65,0.005998627);
   hEFlipperClone->SetBinContent(66,0.005550515);
   hEFlipperClone->SetBinContent(67,0.004146726);
   hEFlipperClone->SetBinContent(68,0.002785524);
   hEFlipperClone->SetBinContent(69,0.002780912);
   hEFlipperClone->SetBinContent(70,0.001955762);
   hEFlipperClone->SetBinContent(71,0.001196697);
   hEFlipperClone->SetBinContent(72,0.0009275449);
   hEFlipperClone->SetBinContent(73,0.0004103338);
   hEFlipperClone->SetBinContent(74,0.0003653788);
   hEFlipperClone->SetBinContent(75,0.0002475647);
   hEFlipperClone->SetBinContent(76,0.0001448874);
   hEFlipperClone->SetBinContent(77,-0.0001069676);
   hEFlipperClone->SetBinContent(78,0.0002279751);
   hEFlipperClone->SetBinContent(79,-0.0002556696);
   hEFlipperClone->SetBinContent(80,0.0002081454);
   hEFlipperClone->SetBinContent(81,-0.0001802417);
   hEFlipperClone->SetBinContent(82,0.0001094775);
   hEFlipperClone->SetBinContent(83,0.0001021641);
   hEFlipperClone->SetBinContent(84,-6.720283e-05);
   hEFlipperClone->SetBinContent(85,-2.069301e-05);
   hEFlipperClone->SetBinContent(86,-0.0001778551);
   hEFlipperClone->SetBinContent(87,-0.0002069073);
   hEFlipperClone->SetBinContent(88,0.0002050919);
   hEFlipperClone->SetBinContent(89,5.5018e-06);
   hEFlipperClone->SetBinContent(90,0.0001297852);
   hEFlipperClone->SetBinContent(91,0.0001645202);
   hEFlipperClone->SetBinContent(92,1.679766e-05);
   hEFlipperClone->SetBinContent(93,0.0004969584);
   hEFlipperClone->SetBinContent(94,0.0005285302);
   hEFlipperClone->SetBinContent(95,-0.0001433009);
   hEFlipperClone->SetBinContent(96,0.0002965277);
   hEFlipperClone->SetBinContent(97,-0.0001372856);
   hEFlipperClone->SetBinContent(98,1.944697e-05);
   hEFlipperClone->SetBinContent(99,-1.461355e-05);
   hEFlipperClone->SetBinContent(100,0.0001382396);
   hEFlipperClone->SetBinContent(101,0.0001261757);
   hEFlipperClone->SetBinContent(102,-2.71269e-05);
   hEFlipperClone->SetBinContent(103,-3.756019e-05);
   hEFlipperClone->SetBinError(1,0.0001607538);
   hEFlipperClone->SetBinError(2,0.0002783453);
   hEFlipperClone->SetBinError(3,0.0003737296);
   hEFlipperClone->SetBinError(4,0.0004257615);
   hEFlipperClone->SetBinError(5,0.0004595565);
   hEFlipperClone->SetBinError(6,0.0004837438);
   hEFlipperClone->SetBinError(7,0.0005153653);
   hEFlipperClone->SetBinError(8,0.0005335152);
   hEFlipperClone->SetBinError(9,0.0005535113);
   hEFlipperClone->SetBinError(10,0.0005701567);
   hEFlipperClone->SetBinError(11,0.0005790141);
   hEFlipperClone->SetBinError(12,0.0005950265);
   hEFlipperClone->SetBinError(13,0.00060532);
   hEFlipperClone->SetBinError(14,0.000615608);
   hEFlipperClone->SetBinError(15,0.0006205245);
   hEFlipperClone->SetBinError(16,0.0006312579);
   hEFlipperClone->SetBinError(17,0.0006369955);
   hEFlipperClone->SetBinError(18,0.0006418732);
   hEFlipperClone->SetBinError(19,0.0006494547);
   hEFlipperClone->SetBinError(20,0.0006478049);
   hEFlipperClone->SetBinError(21,0.0006488917);
   hEFlipperClone->SetBinError(22,0.0006547094);
   hEFlipperClone->SetBinError(23,0.0006529324);
   hEFlipperClone->SetBinError(24,0.000653448);
   hEFlipperClone->SetBinError(25,0.0006521795);
   hEFlipperClone->SetBinError(26,0.0006476902);
   hEFlipperClone->SetBinError(27,0.0006473806);
   hEFlipperClone->SetBinError(28,0.0006453291);
   hEFlipperClone->SetBinError(29,0.0006420351);
   hEFlipperClone->SetBinError(30,0.0006408947);
   hEFlipperClone->SetBinError(31,0.0006336109);
   hEFlipperClone->SetBinError(32,0.0006254144);
   hEFlipperClone->SetBinError(33,0.0006190161);
   hEFlipperClone->SetBinError(34,0.0006125336);
   hEFlipperClone->SetBinError(35,0.0006079814);
   hEFlipperClone->SetBinError(36,0.0005990917);
   hEFlipperClone->SetBinError(37,0.0005871198);
   hEFlipperClone->SetBinError(38,0.000580902);
   hEFlipperClone->SetBinError(39,0.0005694267);
   hEFlipperClone->SetBinError(40,0.0005625537);
   hEFlipperClone->SetBinError(41,0.0005488728);
   hEFlipperClone->SetBinError(42,0.0005368083);
   hEFlipperClone->SetBinError(43,0.0005285279);
   hEFlipperClone->SetBinError(44,0.0005154824);
   hEFlipperClone->SetBinError(45,0.0005001457);
   hEFlipperClone->SetBinError(46,0.0004850489);
   hEFlipperClone->SetBinError(47,0.0004692819);
   hEFlipperClone->SetBinError(48,0.0004618629);
   hEFlipperClone->SetBinError(49,0.0004432145);
   hEFlipperClone->SetBinError(50,0.0004256864);
   hEFlipperClone->SetBinError(51,0.0004137751);
   hEFlipperClone->SetBinError(52,0.0003986137);
   hEFlipperClone->SetBinError(53,0.0003775937);
   hEFlipperClone->SetBinError(54,0.0003650927);
   hEFlipperClone->SetBinError(55,0.0003453884);
   hEFlipperClone->SetBinError(56,0.0003261171);
   hEFlipperClone->SetBinError(57,0.0003093165);
   hEFlipperClone->SetBinError(58,0.0002929291);
   hEFlipperClone->SetBinError(59,0.0002746646);
   hEFlipperClone->SetBinError(60,0.0002550808);
   hEFlipperClone->SetBinError(61,0.0002369154);
   hEFlipperClone->SetBinError(62,0.0002159417);
   hEFlipperClone->SetBinError(63,0.0002036468);
   hEFlipperClone->SetBinError(64,0.0001854241);
   hEFlipperClone->SetBinError(65,0.0001640159);
   hEFlipperClone->SetBinError(66,0.0001556676);
   hEFlipperClone->SetBinError(67,0.0001371361);
   hEFlipperClone->SetBinError(68,0.0001204123);
   hEFlipperClone->SetBinError(69,0.000116867);
   hEFlipperClone->SetBinError(70,0.0001027876);
   hEFlipperClone->SetBinError(71,8.795225e-05);
   hEFlipperClone->SetBinError(72,8.163883e-05);
   hEFlipperClone->SetBinError(73,6.550503e-05);
   hEFlipperClone->SetBinError(74,6.486158e-05);
   hEFlipperClone->SetBinError(75,5.795306e-05);
   hEFlipperClone->SetBinError(76,5.879199e-05);
   hEFlipperClone->SetBinError(77,5.049313e-05);
   hEFlipperClone->SetBinError(78,5.699982e-05);
   hEFlipperClone->SetBinError(79,4.4959e-05);
   hEFlipperClone->SetBinError(80,5.252284e-05);
   hEFlipperClone->SetBinError(81,4.477577e-05);
   hEFlipperClone->SetBinError(82,5.359608e-05);
   hEFlipperClone->SetBinError(83,5.302637e-05);
   hEFlipperClone->SetBinError(84,4.449491e-05);
   hEFlipperClone->SetBinError(85,5.106773e-05);
   hEFlipperClone->SetBinError(86,3.842288e-05);
   hEFlipperClone->SetBinError(87,4.39368e-05);
   hEFlipperClone->SetBinError(88,5.476952e-05);
   hEFlipperClone->SetBinError(89,4.958749e-05);
   hEFlipperClone->SetBinError(90,0.0001515123);
   hEFlipperClone->SetBinError(91,0.0001200921);
   hEFlipperClone->SetBinError(92,9.778422e-05);
   hEFlipperClone->SetBinError(93,9.404746e-05);
   hEFlipperClone->SetBinError(94,8.72329e-05);
   hEFlipperClone->SetBinError(95,6.512071e-05);
   hEFlipperClone->SetBinError(96,7.032727e-05);
   hEFlipperClone->SetBinError(97,4.896222e-05);
   hEFlipperClone->SetBinError(98,5.16976e-05);
   hEFlipperClone->SetBinError(99,4.471131e-05);
   hEFlipperClone->SetBinError(100,4.685843e-05);
   hEFlipperClone->SetBinError(101,4.166862e-05);
   hEFlipperClone->SetBinError(102,3.714333e-05);
   hEFlipperClone->SetBinError(103,3.614517e-05);
   hEFlipperClone->SetEntries(9167);
   hEFlipperClone->SetStats(0);
   
   TF1 *pol0 = new TF1("pol0","pol0",780,2300);
   pol0->SetFillColor(19);
   pol0->SetFillStyle(0);
   pol0->SetLineWidth(2);
   pol0->SetChisquare(249.2649);
   pol0->GetYaxis()->SetTitleOffset(1.6);
   pol0->SetParameter(0,-6.760193e-06);
   pol0->SetParError(0,1.020788e-05);
   pol0->SetParLimits(0,0,0);
   hEFlipperClone->GetListOfFunctions()->Add(pol0);
   hEFlipperClone->SetMarkerStyle(25);
   hEFlipperClone->SetMarkerSize(0.8);
   hEFlipperClone->GetXaxis()->SetTitle(" ADC Channel ");
   hEFlipperClone->GetXaxis()->SetRange(79,103);
   hEFlipperClone->GetYaxis()->SetTitle(" Rate (mHz)");
   hEFlipperClone->GetYaxis()->CenterTitle(true);
   hEFlipperClone->GetYaxis()->SetLabelSize(0.05);
   hEFlipperClone->GetYaxis()->SetTitleSize(0.05);
   hEFlipperClone->GetYaxis()->SetTitleOffset(1.24);
   hEFlipperClone->Draw("E");
   
   TPaveText *pt = new TPaveText(0.1210762,0.9051724,0.8878924,0.9913793,"blNDC");
   TLine *l1 = new TLine(9000,5.056736e-06,23000,5.056736e-06);
   l1->SetLineWidth(2);
   pt->SetName("title");
   pt->SetBorderSize(1);
   pt->SetLineColor(0);
   TText *text = pt->AddText("Residual Background ");
   pt->Draw();
   l1->Draw("same");
   cFinal_2->Modified();
   cFinal->cd();
   cFinal->Modified();
   cFinal->cd();
   cFinal->SetSelected(cFinal);

   cout << "ROI Beta-rate (200-600keV) " <<  hEFlipperOn->Integral(20,60) << " per keV ave ";
   cout << hEFlipperOn->Integral(20,60) / 400. << endl;
   cout << "Above Endpoint Residual Bkg (900-2300keV) " << hEFlipperClone->Integral(90,103);
   cout << " per keV ave " << hEFlipperClone->Integral(90,103) / 1400. << endl;
   
   cout << "Residual fraction " <<  (hEFlipperClone->Integral(90,103) / 1400.) / 
     (hEFlipperOn->Integral(20,60) / 400.) << endl;
}
