#include "Bck_Run.h"

using namespace std;

//ClassImp(Bck_Run);

Bck_Run::Bck_Run(Int_t n,Int_t m,TSQLServer *sql):Run(n,m,sql)
{
   
  runnum  = n;
  runtype = m;
  // move to top level ROOT directory
  //gROOT->cd();
  // create a working directory for the class
  //dHists = new TDirectory("dHists",Form("Histograms_%d",n));
  // get the path
  const char* filepath = getenv("UCNAOUTPUTDIR");
  const char* author   = getenv("UCNA_ANA_AUTHOR");

  f1 = new TFile(Form("%s/hists/spec_%d.root",filepath,n),"UPDATE");
  // check if the file exists
  if(!(f1->IsOpen()))
    cout << "File spec_"<<n<<".root has been successfully openned" << endl;
  // Get the tree from the file 
  t1 = (TTree*)f1->Get("phys");
  // Check is the analysis directory exist, create it if it doesn't
  AnalysisDirExist = kFALSE;
  if(!(f1->cd(Form("%s_Analysis_%d_%d",author,(Int_t)RAD,rotated)))){
    f1->mkdir(Form("%s_Analysis_%d_%d",author,(Int_t)RAD,rotated));
  } else {
    f1->cd(Form("%s_Analysis_%d_%d",author,(Int_t)RAD,rotated));
    AnalysisDirExist = kTRUE;
  }
 // Make a resident directory for analysis and holding the histograms.  
 //Since the histograms are located in s  
 // directory you can close the file after the analysis is finished.
 //-------------------------------------------------------------------
  SetBranches();  // The branch addresses.......................
  Find_TDC_Cut(n,sql);
  Load_Rotation_Matrix(GetGeo()); // Rotate the detector corrdinates
  Load_Background(runnum,runtype,GetGeo()); // Load Parent Background directory 
}

Bck_Run::~Bck_Run()
{

}

Int_t Bck_Run::Draw_2d(Int_t nr,Int_t n)
{
  
  hpw = new TH2F(Form("bckr[%i]->hpw",n),"West Position;X;Y",150,-75,75,150,-75,75);
  hpe = new TH2F(Form("bckr[%i]->hpe",n),"East Position;X;Y",150,-75,75,150,-75,75);
  
  // Draw 2-d Position Plots of the sources
  
  return 0;

}
//--------------------------------------------------------------------------------------------------------------------
Int_t Bck_Run::Fill(Int_t n,Int_t remake,Double_t *sep)
{

  Float_t East_Time_Cnt=0.;
  Float_t West_Time_Cnt=0.;

  Float_t OldTE = 0.;
  Float_t OldTW = 0.;  

  for(Int_t i = 0 ; i < 100 ; i ++){
    seppar[i] = sep[i];
  }

  if(remake == 1 || !AnalysisDirExist){
    Initialize_hist(0,1,1);
    for(Int_t i = 0 ; i < t1->GetEntries() ; i++){

      t1->GetEntry(i);  // Get Enetry from the Tree;
      ScaleTDC();
      // Stupid live time counter.  Live times are up to date in the mysql database so 
      // these are being used to up date the clocks.
      if(TofE < OldTE)East_Time_Cnt++;
      OldTE = TofE;
      
      if(TofW < OldTW)West_Time_Cnt++;
      OldTW = TofW; 

      if(Check_Vetos()){
	Book_Raw(i);
      } else {	
	Book_Muons();
      }
    }
    hGammaCounts->SetBinContent(1,GammasEast);
    hGammaCounts->SetBinContent(2,GammasWest);
    hGammaCountsg->SetBinContent(1,GammasEastg);
    hGammaCountsg->SetBinContent(2,GammasWestg);
    
    if(GetGeo() == 1){
      rtime_e = rtime_e*(hGammaCountsg->GetBinContent(1))/(hGammaCounts->GetBinContent(1)); 
      rtime_w = rtime_w*(hGammaCountsg->GetBinContent(2))/(hGammaCounts->GetBinContent(2)); 
    }
    SaveHistograms();
  } else if(remake == 0 && AnalysisDirExist){
    GetHistograms();
    if(GetGeo() ==1){    
      rtime_e = rtime_e*(hGammaCountsg->GetBinContent(1))/(hGammaCounts->GetBinContent(1)); 
      rtime_w = rtime_w*(hGammaCountsg->GetBinContent(2))/(hGammaCounts->GetBinContent(2)); 
    }
  }
 
  return 0;

}

Int_t Bck_Run::Draw_Hists(Int_t n)
{
    c1->cd(1);
    hpe->Draw("colz");
    
    c1->cd(2);
    hpw->Draw("colz");
    
    
    c1->cd(3);
    heq->Draw();
    
    c2->cd(1);
    gPad->SetLogy();
    hte->Draw();
    
    c2->cd(2);
    hEtype_1->Draw();

    c1->cd(4);
    hwq->Draw();

    c2->cd(4);
    gPad->SetLogy();
    htw->Draw();
   
    c2->cd(3);
    hWtype_1->Draw();
  
    delete c1;
    delete c2;
    
   return 0;
}

Bool_t Bck_Run::Check_Vetos()
{
  return kTRUE;
  
  if(TaggedTopE || TaggedBackE || TaggedDriftE ||  TaggedBackW || TaggedDriftW ) return kFALSE;
  
  return kTRUE; 
}

